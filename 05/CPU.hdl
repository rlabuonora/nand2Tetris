// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction ,b=outD, sel=instruction[15], out=DorInstruction);
    
    // Load A-Register?
    Not(in=instruction[15], out=aInstruction);
    And(a=instruction[15], b=instruction[5], out=assignA);

    Or(a=aInstruction, b=assignA, out=loadA);

    // A-register
    Register(in=DorInstruction, load=loadA, out=outAregister);
    And16(a=outAregister, b=true, out[0..14]=addressM);
    
    //     
    And(a=instruction[12], b=instruction[12], out=aBit);
    Mux16(a=outAregister,b=inM, sel=aBit, out=AM);
    // D-register
    Register(in=outALU, load=instruction[4], out=outD);
    // ALU

    And(a=instruction[11], b=instruction[11], out=c1);
    And(a=instruction[10], b=instruction[10], out=c2);
    And(a=instruction[9], b=instruction[9], out=c3);
    And(a=instruction[8], b=instruction[8], out=c4);
    And(a=instruction[7], b=instruction[7], out=c5);
    And(a=instruction[6], b=instruction[6], out=c6);

    ALU(x=outD, y=AM,  zx=c1,
                       nx=c2, 
		       zy=c3,
		       ny=c4, 
		       f =c5, 
		       no=c6,
		       out=outALU,
		       zr=zero,
		       ng=negative);

    // JUMP? j1= instruction[0], j2=[1], j3=instruction[2]
    Not(in=negative, out=positive);
    Not(in=zero, out=notZero);
    And(a=positive, b=notZero, out=positiveAndnotZero);
    // JMP1    
    And(a=positiveAndnotZero, b=instruction[0], out=jmp1);
    // JMP2
    And(a=instruction[1], b=zero, out=jmp2);
    // JMP3
    Or(a=zero, b=positive, out=zeroOrPositive);
    And(a=instruction[1], b=instruction[5], out=j2Andj3);
    And(a=zeroOrPositive, b=j2Andj3, out=jmp3);
    // JMP4
    And(a=instruction[2], b=negative, out=jmp4);
    // JMP5
    And(a=instruction[2], b=instruction[1], out=j1Orj3);
    And(a=notZero, b=j1Orj3, out=jmp5);    	       
    // JMP6
    Or(a=negative, b=zero, out=negativeOrZero);
    And(a=instruction[2], b=instruction[1], out=j1Andj2);
    And(a=negativeOrZero, b=j1Andj2, out=jmp6);

    // JMP7
    And(a=instruction[0], b=j1Andj2, out=jmp7);

    // JMP?
    Or8Way(in[0]=jmp1, in[1]=jmp2, in[2]=jmp3, in[3]=jmp4, 
    		       in[4]=jmp5, in[5]=jmp6, in[6]=jmp7, in[7]=false, out=jump);
    // jump is true if any of the JMP are true
    // jump2 is true if jmp is true and the instruction is a c-instruction

    And(a=jump, b=instruction[15], out=jump2);
    PC(in=outAregister, load=jump2 , inc=true, reset=reset, out[0..14]=pc);
    And(a=instruction[3], b=instruction[15], out=writeM);
    And16(a=outALU, b=outALU, out=outM);
}